create table applications (
  app_id integer primary key, -- PUT request sets app_id
  app_name varchar,
  callback_url varchar
);
create table feeds (
  feed_id serial primary key,
  title varchar,
  html_url varchar, 
  xml_url varchar not null unique,
  updated timestamp,
  created timestamp default now()
);
create table subscriptions (
  app_id integer references applications,
  feed_id integer references feeds,
  created timestamp default now(),
  unique (app_id, feed_id)
);
create table items (
  item_id serial primary key,
  feed_id integer references feeds on delete cascade,
  item_href varchar unique,
  title varchar,
  author varchar,
  date timestamp,
  crawled timestamp default now(),
  featured_image_id integer, -- featured image
  summary text,
  original_content text
);
create index item_item_id_idx  on items (date);
create table images (
  image_id serial primary key,
  item_id integer references items on delete cascade,
  src varchar,
  filename varchar,  -- save under dir named after the feed_id
  inserted_at timestamp default now(),
  width integer,
  height integer
);

alter table items add constraint items_featured_images_constraint foreign key (featured_image_id) references images (image_id);

create table crawls (
  crawl_id serial primary key,
  app_id integer references applications,
  created timestamp default now(),
  started timestamp,
  completed timestamp
);
-- TODO pubsub notifications


drop view if exists app_items;

-- see Chak; view-backed model

create view app_items as
  select 
    subscriptions.app_id as app_id,
    items.item_id,
    items.title, 
    items.date,
    items.item_href,
    items.summary,
    images.filename as image_file,
    items.feed_id,
    feeds.title as feed_title, 
    feeds.xml_url as feed_xml_url, 
    feeds.html_url as feed_html_url
    from items
  inner join feeds on feeds.feed_id = items.feed_id
  inner join subscriptions on feeds.feed_id = subscriptions.feed_id
  left outer join images on items.featured_image_id = images.image_id;

        
create view app_subscriptions 
  as select app_name, app_id, feed_id, title, xml_url 
    from subscriptions inner join feeds using (feed_id) inner join applications using (app_id);

create view feed_item_counts 
  as select feed_id, max(feeds.title) as feed_title, count(*) as items_count, max(feeds.xml_url) as feed_xml_url from feeds inner join items using (feed_id) group by feeds.feed_id order by items_count desc;
